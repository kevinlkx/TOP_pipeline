
# CONFIGURATION ---------------------------------------------------------------
configfile: '../config/config_train_ATAC_motifver1.yaml'

REF_GENOME_DIR = config['ref_genome_dir']
MOTIF_DIR = config['motif_dir']
BLACKLIST_DIR = config['blacklist_dir']
ENCODE_DATA_DIR = config['encode_data_dir']
OUT_DIR = config['out_dir']
ATAC_DATA_DIR = config['atac_data_dir']
CHIP_DATA_DIR = config['chip_data_dir']
LOG_DIR = config['log_dir']
METADATA_DIR = config['metadata_dir']

# Global settings -------------------------------------------------------------
DATA_TYPE = config['data_type']
SHIFT_ATAC = '--shift_ATAC'
THRESH_PVALUE = config['thresh_pvalue']
THRESH_PWMSCORE = config['thresh_pwmscore']
VER_GENOME = config['ver_genome']
BIN = config['bin']
MOTIF_SET = config['motif_set']
CHIP_REF_SIZE = config['chip_ref_size']
ATAC_REF_SIZE = config['atac_ref_size']
METADATA_TABLE_FILE = config['training_metadata_file']

# Load training data from metadata table --------------------------------------
import pandas as pd

metadata_table = pd.read_csv(METADATA_TABLE_FILE, sep='\t')

# Focus on a few TFs and cell types
# SELECTED_TFS = ['GABPA', 'NFIC', 'FOXA1', 'CTCF']
# SELECTED_CELLTYPES = ['K562', 'GM12878']
# EXCLUDED_TFS = ['IRF1']
# metadata_table = metadata_table[~metadata_table['tf_name'].isin(EXCLUDED_TFS)]
# metadata_table = metadata_table[(metadata_table['cell_type'].isin(SELECTED_CELLTYPES))]
# metadata_table = metadata_table[(metadata_table['tf_name'].isin(SELECTED_TFS)) & (metadata_table['cell_type'].isin(SELECTED_CELLTYPES))]

ALL_TRAINING_TFS = metadata_table['tf_name'].tolist()
ALL_TRAINING_PWMIDS = metadata_table['pwm_id'].tolist()
ALL_TRAINING_CELLTYPES = metadata_table['cell_type'].tolist()
# ChIP-seq replicates will be counted together(merged)
ALL_CHIP_TRAINING_SAMPLES = ';'.join(metadata_table['chip_file'].tolist()).split(';')

# If ATAC-seq data have replicates, split the ATAC-seq samples
max_n_reps = max(metadata_table['atac_file'].str.count(';') + 1)
if max_n_reps == 1:
    ALL_ATAC_TRAINING_SAMPLES = metadata_table['atac_file'].tolist()
else:
    ALL_ATAC_TRAINING_SAMPLES = ';'.join(metadata_table['atac_file'].tolist()).split(';')

# List data sets
TF_SET = set(ALL_TRAINING_TFS)
PWMID_SET = set(ALL_TRAINING_PWMIDS)
CELLTYPE_SET = set(ALL_TRAINING_CELLTYPES)
ATAC_SET = set(ALL_ATAC_TRAINING_SAMPLES)
CHIP_SET = set(ALL_CHIP_TRAINING_SAMPLES)

# Individual file patterns --------------------------------------------------------

REF_GENOME_FILE = f'{REF_GENOME_DIR}/{VER_GENOME}/{VER_GENOME}.fasta'
BLACKLIST_FILE = f'{BLACKLIST_DIR}/{VER_GENOME}_blacklist.bed.gz'
CHROM_SIZE_FILE = f'{REF_GENOME_DIR}/{VER_GENOME}/{VER_GENOME}.chrom.sizes'

## sites files
PWM_FILE = f'{MOTIF_DIR}/{{pwm_id}}.meme_pwm.txt' # motif set ver1 (jasparfix_memedb)
FIMO_DIR = f'{OUT_DIR}/fimo_motif_matches/{VER_GENOME}/{MOTIF_SET}'
FIMO_FILE = f'{FIMO_DIR}/{{pwm_id}}_{THRESH_PVALUE}.fimo.txt'
SITES_DIR = f'{OUT_DIR}/candidate_sites/{VER_GENOME}/{MOTIF_SET}'
SITES_FILE = f'{SITES_DIR}/{{pwm_id}}_{THRESH_PVALUE}.candidate_sites.txt.gz'

## ATAC files
ATAC_BAM_DIR = f'{ATAC_DATA_DIR}/{VER_GENOME}'
ATAC_BAM_FILE = f'{ATAC_BAM_DIR}/{{atac_sample}}.bam'
ATAC_BAI_FILE = f'{ATAC_BAM_FILE}.bai'
ATAC_IDXSTATS_FILE = f'{ATAC_BAM_FILE}.idxstats.txt'

ATAC_GENOMECOUNTS_DIR = f'{OUT_DIR}/atac_genome_counts_shiftATAC/{VER_GENOME}'
ATAC_GENOMECOUNTS_FWD_FILE = f'{ATAC_GENOMECOUNTS_DIR}/{{atac_sample}}.fwd.genomecounts.bw'
ATAC_GENOMECOUNTS_REV_FILE = f'{ATAC_GENOMECOUNTS_DIR}/{{atac_sample}}.rev.genomecounts.bw'

ATAC_SITES_COUNTS_DIR = F'{OUT_DIR}/atac_sites_counts_shiftATAC/{VER_GENOME}/{MOTIF_SET}'
ATAC_COUNTMATRIX_FILE = f'{ATAC_SITES_COUNTS_DIR}/{{atac_sample}}/{{pwm_id}}_{THRESH_PVALUE}.countmatrix.rds'
ATAC_BINS_FILE = f'{ATAC_SITES_COUNTS_DIR}/{{atac_sample}}/{{pwm_id}}_{THRESH_PVALUE}.{BIN}_bins.rds'

## ChIP files
CHIP_BAM_DIR = f'{CHIP_DATA_DIR}/{VER_GENOME}/bam'
CHIP_BAM_FILE = f'{CHIP_BAM_DIR}/{{chip_sample}}.bam'
CHIP_BAI_FILE = f'{CHIP_BAM_FILE}.bai'
CHIP_IDXSTATS_FILE = f'{CHIP_BAM_FILE}.idxstats.txt'

CHIP_PEAK_DIR = f'{CHIP_DATA_DIR}/{VER_GENOME}/peaks'
CHIP_PEAKS_FILE = f'{CHIP_PEAK_DIR}/{{chip_peak_sample}}.bed.gz'

CHIP_COUNTS_DIR = F'{OUT_DIR}/chip_sites_counts/{VER_GENOME}/{MOTIF_SET}'
CHIP_COUNTS_FILE = f'{CHIP_COUNTS_DIR}/{{tf_name}}_{{pwm_id}}_{THRESH_PVALUE}.{{cell_type}}.normalized_chipcounts.rds'
CHIP_PEAKLABELS_FILE = f'{CHIP_COUNTS_DIR}/{{tf_name}}_{{pwm_id}}_{THRESH_PVALUE}.{{cell_type}}.chip.peak.labels.rds'

COMBINED_ATAC_CHIP_DATA_DIR = F'{OUT_DIR}/combined_atac_chip_data_shiftATAC/{VER_GENOME}/{MOTIF_SET}'
COMBINED_ATAC_CHIP_DATA_FILE = f'{COMBINED_ATAC_CHIP_DATA_DIR}/{{tf_name}}_{{pwm_id}}_{THRESH_PVALUE}.{{cell_type}}.{BIN}.combined.data.rds'

# File lists ------------------------------------------------------------------

## All sites
ALL_PWM_FILES = expand(PWM_FILE, pwm_id = PWMID_SET)
ALL_FIMO_FILES = expand(FIMO_FILE, pwm_id = PWMID_SET)
ALL_SITES_FILES = expand(SITES_FILE, pwm_id = PWMID_SET)

## All ATAC files
ALL_ATAC_BAM_FILES = expand(ATAC_BAM_FILE, atac_sample = ATAC_SET)
ALL_ATAC_BAI_FILES = expand(ATAC_BAI_FILE, atac_sample = ATAC_SET)
ALL_ATAC_IDXSTATS_FILES = expand(ATAC_IDXSTATS_FILE, atac_sample = ATAC_SET)

ALL_ATAC_GENOMECOUNTS_FWD_FILES = expand(ATAC_GENOMECOUNTS_FWD_FILE, atac_sample = ATAC_SET)
ALL_ATAC_GENOMECOUNTS_REV_FILES = expand(ATAC_GENOMECOUNTS_REV_FILE, atac_sample = ATAC_SET)

if max_n_reps == 1:
    ALL_ATAC_COUNTMATRIX_FILES = expand(ATAC_COUNTMATRIX_FILE, zip,
                                 atac_sample = ALL_ATAC_TRAINING_SAMPLES, pwm_id = ALL_TRAINING_PWMIDS)
    ALL_ATAC_BINS_FILES = expand(ATAC_BINS_FILE, zip,
                                 atac_sample = ALL_ATAC_TRAINING_SAMPLES, pwm_id = ALL_TRAINING_PWMIDS)
else:
    ALL_ATAC_COUNTMATRIX_FILES = expand(ATAC_COUNTMATRIX_FILE,
                                        atac_sample = ATAC_SET, pwm_id = PWMID_SET)
    ALL_ATAC_BINS_FILES = expand(ATAC_BINS_FILE,
                                 atac_sample = ATAC_SET, pwm_id = PWMID_SET)

## All ChIP files
ALL_CHIP_BAM_FILES = expand(CHIP_BAM_FILE, chip_sample = CHIP_SET)
ALL_CHIP_BAI_FILES = expand(CHIP_BAI_FILE, chip_sample = CHIP_SET)
ALL_CHIP_IDXSTATS_FILES = expand(CHIP_IDXSTATS_FILE, chip_sample = CHIP_SET)

ALL_CHIP_COUNTS_FILES = expand(CHIP_COUNTS_FILE, zip, tf_name = ALL_TRAINING_TFS,
                               pwm_id = ALL_TRAINING_PWMIDS, cell_type = ALL_TRAINING_CELLTYPES)

ALL_CHIP_PEAKLABELS_FILES = expand(CHIP_PEAKLABELS_FILE, zip, tf_name = ALL_TRAINING_TFS,
                               pwm_id = ALL_TRAINING_PWMIDS, cell_type = ALL_TRAINING_CELLTYPES)

## All combined data files
ALL_COMBINED_ATAC_CHIP_DATA_FILES = expand(COMBINED_ATAC_CHIP_DATA_FILE, zip,
                                           tf_name = ALL_TRAINING_TFS,
                                           pwm_id = ALL_TRAINING_PWMIDS,
                                           cell_type = ALL_TRAINING_CELLTYPES)


# Rules -----------------------------------------------------------------------

include: 'rules/reads.smk'
include: 'rules/sites.smk'
include: 'rules/chip.smk'
include: 'rules/atac.smk'
include: 'rules/combine_atac_chip_data.smk'

rule all:
    input:
        ALL_COMBINED_ATAC_CHIP_DATA_FILES


rule list_data:
    shell:
        '''
        echo 'TFs: {TF_SET}'
        echo 'Cell types: {CELLTYPE_SET}'
        echo 'ATAC samples: {ATAC_SET}'
        echo 'ChIP samples: {CHIP_SET}'
        '''

rule list_env:
    conda:
        'envs/top.yaml'
    shell:
        '''
        samtools --version
        bedtools --version
        python --version
        python -c 'import pandas as pd; print('pandas version: ' + pd.__version__)'
        R --version
        '''
